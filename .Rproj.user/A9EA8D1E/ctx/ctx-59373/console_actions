{
    "type": [
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        2,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        2,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.2.1 (2022-06-23 ucrt) -- \"Funny-Looking Kid\"\nCopyright (C) 2022 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "- Project '~/Powers Math 378 Porject' loaded. [renv 1.0.7]\n[Workspace loaded from ~/Powers Math 378 Porject/.RData]\r\n\r\n",
        "> ",
        "library(reticulate)",
        "> ",
        "library(reticulate)",
        "> ",
        "reticulate::repl_python()",
        "Python 3.9.5 (C:/Users/C25Chase.Powers/OneDrive - afacademy.af.edu/Documents/Powers Math 378 Porject/.venv/Scripts/python.exe)\nReticulate 1.35.0 REPL -- A Python interpreter in R.\nEnter 'exit' or 'quit' to exit the REPL and return to R.\n",
        ">>> ",
        "from palmerpenguins import penguins",
        ">>> ",
        "from pandas import get_dummies",
        ">>> ",
        "import numpy as np",
        ">>> ",
        "from sklearn.linear_model import LinearRegression",
        ">>> ",
        "from sklearn import preprocessing",
        ">>> ",
        "import duckdb",
        ">>> ",
        "",
        ">>> ",
        "## Get Data",
        ">>> ",
        "df = penguins.load_penguins().dropna()",
        ">>> ",
        "",
        ">>> ",
        "df.head(3)",
        "  species     island  bill_length_mm  ...  body_mass_g     sex  year\r\n0  Adelie  Torgersen            39.1  ...       3750.0    male  2007\r\n1  Adelie  Torgersen            39.5  ...       3800.0  female  2007\r\n2  Adelie  Torgersen            40.3  ...       3250.0  female  2007\r\n\r\n[3 rows x 8 columns]\r\n",
        ">>> ",
        "",
        ">>> ",
        "## Define Model and Fit",
        ">>> ",
        "X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)",
        ">>> ",
        "y = df['body_mass_g']",
        ">>> ",
        "",
        ">>> ",
        "model = LinearRegression().fit(X, y)",
        ">>> ",
        "",
        ">>> ",
        "## Get some information",
        ">>> ",
        "print(f\"R^2 {model.score(X,y)}\")",
        "R^2 0.8555368759537614\r\n",
        ">>> ",
        "print(f\"Intercept {model.intercept_}\")",
        "Intercept 2169.269720939398\r\n",
        ">>> ",
        "print(f\"Columns {X.columns}\")",
        "Columns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\r\n",
        ">>> ",
        "print(f\"Coefficients {model.coef_}\")",
        "Coefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\r\n",
        ">>> ",
        "from pandas import get_dummies",
        ">>> ",
        "import numpy as np",
        ">>> ",
        "from sklearn.linear_model import LinearRegression",
        ">>> ",
        "from sklearn import preprocessing",
        ">>> ",
        "",
        ">>> ",
        "## Get Data",
        ">>> ",
        "con = duckdb.connect('my-db.duckdb')",
        ">>> ",
        "df = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nduckdb.duckdb.InvalidInputException: Invalid Input Error: Python Object \"penguins\" of type \"module\" found on line \"<string>:1\" not suitable for replacement scans.\nMake sure that \"penguins\" is either a pandas.DataFrame, duckdb.DuckDBPyRelation, pyarrow Table, Dataset, RecordBatchReader, Scanner, or NumPy ndarrays with supported format\n",
        ">>> ",
        "con.close()",
        ">>> ",
        "",
        ">>> ",
        "df.head(3)",
        "  species     island  bill_length_mm  ...  body_mass_g     sex  year\r\n0  Adelie  Torgersen            39.1  ...       3750.0    male  2007\r\n1  Adelie  Torgersen            39.5  ...       3800.0  female  2007\r\n2  Adelie  Torgersen            40.3  ...       3250.0  female  2007\r\n\r\n[3 rows x 8 columns]\r\n",
        ">>> ",
        "",
        ">>> ",
        "## Define Model and Fit",
        ">>> ",
        "X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)",
        ">>> ",
        "y = df['body_mass_g']",
        ">>> ",
        "",
        ">>> ",
        "model = LinearRegression().fit(X, y)",
        ">>> ",
        "",
        ">>> ",
        "## Get some information",
        ">>> ",
        "print(f\"R^2 {model.score(X,y)}\")",
        "R^2 0.8555368759537614\r\n",
        ">>> ",
        "print(f\"Intercept {model.intercept_}\")",
        "Intercept 2169.269720939398\r\n",
        ">>> ",
        "print(f\"Columns {X.columns}\")",
        "Columns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\r\n",
        ">>> ",
        "print(f\"Coefficients {model.coef_}\")",
        "Coefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\r\n",
        ">>> ",
        "",
        ">>> ",
        "## Turn into Vetiver Mode",
        ">>> ",
        "from vetiver import VetiverModel",
        ">>> ",
        "v = VetiverModel(model, model_name='penguin_model', prototype_data=X)",
        ">>> ",
        "",
        ">>> ",
        "## Save to Board",
        ">>> ",
        "from pins import board_folder",
        ">>> ",
        "from vetiver import vetiver_pin_write",
        ">>> ",
        "",
        ">>> ",
        "model_board = board_folder(\"/data/model\", allow_pickle_read = True)",
        ">>> ",
        "vetiver_pin_write(model_board, v)",
        "Model Cards provide a framework for transparent, responsible reporting. \r\n Use the vetiver `.qmd` Quarto template as a place to start, \r\n with vetiver.model_card()",
        "\r\n",
        "Writing pin:\r\nName: 'penguin_model'\r\nVersion: 20240416T131536Z-cf3d4",
        "\r\n",
        ">>> ",
        "",
        ">>> ",
        "## Turn model into API",
        ">>> ",
        "from vetiver import VetiverAPI",
        ">>> ",
        "app = VetiverAPI(v, check_prototype = True)",
        ">>> ",
        "",
        ">>> ",
        "## Turn model into API",
        ">>> ",
        "from vetiver import VetiverAPI",
        ">>> ",
        "app = VetiverAPI(v, check_prototype = True)",
        ">>> ",
        "b = pins.board_folder('/data/model', allow_pickle_read = True)",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'pins' is not defined\n",
        ">>> ",
        "v = VetiverModel.from_pin(b, 'penguin_model')",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'b' is not defined\n",
        ">>> ",
        "",
        ">>> ",
        "print(b)",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'b' is not defined\n",
        ">>> ",
        "print(v)",
        "<vetiver.vetiver_model.VetiverModel object at 0x0000019A93C339A0>\r\n",
        ">>> ",
        "b = pins.board_folder('/data/model', allow_pickle_read = True)",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'pins' is not defined\n",
        ">>> ",
        "v = VetiverModel.from_pin(b, 'penguin_model')",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'b' is not defined\n",
        ">>> ",
        "",
        ">>> ",
        "## Get Data",
        ">>> ",
        "con = duckdb.connect('my-db.duckdb')",
        ">>> ",
        "df = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nduckdb.duckdb.InvalidInputException: Invalid Input Error: Python Object \"penguins\" of type \"module\" found on line \"<string>:1\" not suitable for replacement scans.\nMake sure that \"penguins\" is either a pandas.DataFrame, duckdb.DuckDBPyRelation, pyarrow Table, Dataset, RecordBatchReader, Scanner, or NumPy ndarrays with supported format\n",
        ">>> ",
        "",
        ">>> ",
        "df.head(3)",
        "  species     island  bill_length_mm  ...  body_mass_g     sex  year\r\n0  Adelie  Torgersen            39.1  ...       3750.0    male  2007\r\n1  Adelie  Torgersen            39.5  ...       3800.0  female  2007\r\n2  Adelie  Torgersen            40.3  ...       3250.0  female  2007\r\n\r\n[3 rows x 8 columns]\r\n",
        ">>> ",
        "",
        ">>> ",
        "## Define Model and Fit",
        ">>> ",
        "X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)",
        ">>> ",
        "y = df['body_mass_g']",
        ">>> ",
        "",
        ">>> ",
        "model = LinearRegression().fit(X, y)",
        ">>> ",
        "",
        ">>> ",
        "## Get some information",
        ">>> ",
        "print(f\"R^2 {model.score(X,y)}\")",
        "R^2 0.8555368759537614\r\n",
        ">>> ",
        "print(f\"Intercept {model.intercept_}\")",
        "Intercept 2169.269720939398\r\n",
        ">>> ",
        "print(f\"Columns {X.columns}\")",
        "Columns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\r\n",
        ">>> ",
        "print(f\"Coefficients {model.coef_}\")",
        "Coefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\r\n",
        ">>> ",
        "",
        ">>> ",
        "## Turn into Vetiver Mode",
        ">>> ",
        "from vetiver import VetiverModel",
        ">>> ",
        "v = VetiverModel(model, model_name='penguin_model', prototype_data=X)",
        ">>> ",
        "",
        ">>> ",
        "## Save to Board",
        ">>> ",
        "from pins import board_folder",
        ">>> ",
        "from vetiver import vetiver_pin_write",
        ">>> ",
        "",
        ">>> ",
        "model_board = board_folder(\"/data/model\", allow_pickle_read = True)",
        ">>> ",
        "vetiver_pin_write(model_board, v)",
        "Model Cards provide a framework for transparent, responsible reporting. \r\n Use the vetiver `.qmd` Quarto template as a place to start, \r\n with vetiver.model_card()",
        "\r\n",
        "Writing pin:\r\nName: 'penguin_model'\r\nVersion: 20240416T132001Z-cf3d4",
        "\r\n",
        ">>> ",
        "",
        ">>> ",
        "## Turn model into API",
        ">>> ",
        "from vetiver import VetiverAPI",
        ">>> ",
        "app = VetiverAPI(v, check_prototype = True)",
        ">>> ",
        "con.close()",
        ">>> ",
        "app.run(port = 8080)",
        "INFO:     Started server process [5280]\r\n",
        "INFO:     Waiting for application startup.\r\nINFO:     VetiverAPI starting...\r\nINFO:     Application startup complete.\r\nINFO:     Uvicorn running on http://127.0.0.1:8080 (Press CTRL+C to quit)\r\n",
        "INFO:     127.0.0.1:53923 - \"GET / HTTP/1.1\" 307 Temporary Redirect\r\nINFO:     127.0.0.1:53923 - \"GET /__docs__ HTTP/1.1\" 200 OK\r\nINFO:     127.0.0.1:53923 - \"GET /openapi.json HTTP/1.1\" 200 OK\r\nINFO:     127.0.0.1:53923 - \"GET /favicon.ico HTTP/1.1\" 404 Not Found\r\n",
        "INFO:     Shutting down\r\n",
        "INFO:     Waiting for application shutdown.\r\n",
        "INFO:     Application shutdown complete.\r\nINFO:     Finished server process [5280]\r\n",
        ">>> ",
        "quit",
        "Warning message:\n",
        "Python 'C:/Program Files/Python39/python.exe' was requested but 'C:/Users/C25Chase.Powers/OneDrive - afacademy.af.edu/Documents/Powers Math 378 Porject/.venv/Scripts/python.exe' was loaded instead (see reticulate::py_config() for more information) \n",
        "> ",
        "renv::snapshot()",
        "- The lockfile is already up to date.\n",
        "> ",
        "## Penguin Size and Mass by Sex and Species",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "library(dplyr)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dbplyr)",
        "Error in library(dbplyr) : there is no package called ‘dbplyr’\n",
        "> ",
        "install.packages(\"dbplyr\")",
        "The following package(s) will be installed:\n- blob       [1.2.4]\n- DBI        [1.2.2]\n- dbplyr     [2.5.0]\n- tidyr      [1.3.1]\n- tidyselect [1.2.1]\nThese packages will be installed into \"~/Powers Math 378 Porject/renv/library/R-4.2/x86_64-w64-mingw32\".\n\n",
        "Do you want to proceed? [Y/n]: ",
        "y",
        "\n# Installing packages --------------------------------------------------------\n- Installing blob ...                           OK [linked from cache]\n- Installing DBI ...                            OK [linked from cache]\n- Installing tidyselect ...                     OK [linked from cache]\n- Installing tidyr ...                          OK [linked from cache]\n- Installing dbplyr ...                         OK [linked from cache]\nSuccessfully installed 5 packages in 0.21 seconds.\n\nThe following loaded package(s) have been updated:\n- tidyselect\nRestart your R session to use the new versions.\n\n",
        "> ",
        "## Penguin Size and Mass by Sex and Species",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "library(dplyr)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dbplyr)",
        "Error: package or namespace load failed for ‘dbplyr’ in loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]]):\n namespace ‘tidyselect’ 1.2.0 is already loaded, but >= 1.2.1 is required\n",
        "\nRestarting R session...\n\n",
        "> ",
        "renv::snapshot()",
        "The following package(s) will be updated in the lockfile:\n\n# CRAN -----------------------------------------------------------------------\n- tidyselect   [1.2.0 -> 1.2.1]\n\n",
        "Do you want to proceed? [Y/n]: ",
        "y",
        "\n- Lockfile written to \"~/Powers Math 378 Porject/renv.lock\".\n",
        "> ",
        "## Penguin Size and Mass by Sex and Species",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "library(dplyr)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dbplyr)",
        "> ",
        "",
        "> ",
        "con <- DBI::dbConnect(",
        "+ ",
        "  duckdb::duckdb(), ",
        "+ ",
        "  dbdir = \"my-db.duckdb\"",
        "+ ",
        "  )",
        "Error in (function (cond)  : \n  error in evaluating the argument 'drv' in selecting a method for function 'dbConnect': there is no package called ‘duckdb’\n",
        "> ",
        "install.packages(\"duckdb\")",
        "# Downloading packages -------------------------------------------------------\n- Downloading duckdb from CRAN ...              OK [9.2 Mb in 7.2s]\nSuccessfully downloaded 1 package in 8.1 seconds.\n\nThe following package(s) will be installed:\n- duckdb [0.10.1]\nThese packages will be installed into \"~/Powers Math 378 Porject/renv/library/R-4.2/x86_64-w64-mingw32\".\n\n",
        "Do you want to proceed? [Y/n]: ",
        "y",
        "\n# Installing packages --------------------------------------------------------\n- Installing duckdb ...                         OK [installed binary and cached in 3.7s]\nSuccessfully installed 1 package in 3.8 seconds.\n",
        "> ",
        "## Penguin Size and Mass by Sex and Species",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "library(dplyr)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dbplyr)",
        "> ",
        "",
        "> ",
        "con <- DBI::dbConnect(",
        "+ ",
        "  duckdb::duckdb(), ",
        "+ ",
        "  dbdir = \"my-db.duckdb\"",
        "+ ",
        "  )",
        "> ",
        "df <- dplyr::tbl(con, \"penguins\")",
        "\u001B[1m\u001B[33mError\u001B[39m in `db_query_fields.DBIConnection()`:\u001B[22m\n\u001B[1m\u001B[22m\u001B[33m!\u001B[39m Can't query fields.\n\u001B[36mℹ\u001B[39m Using SQL: SELECT * FROM (FROM penguins) q01 WHERE (0 = 1)\n\u001B[1mCaused by error:\u001B[22m\n\u001B[33m!\u001B[39m rapi_prepare: Failed to prepare query SELECT *\nFROM (FROM penguins) q01\nWHERE (0 = 1)\nError: Catalog Error: Table with name penguins does not exist!\nDid you mean \"pg_enum\"?\nLINE 2: FROM (FROM penguins) q01\n                   ^\nBacktrace:\n\u001B[90m  1. \u001B[39m\u001B[1mdplyr\u001B[22m::tbl(con, \"penguins\")\n\u001B[90m  4. \u001B[39mdplyr:::tbl.DBIConnection(con, \"penguins\")\n\u001B[90m  6. \u001B[39m\u001B[1mdbplyr\u001B[22m:::tbl.src_dbi(...)\n\u001B[90m  7. \u001B[39mdbplyr::tbl_sql(c(subclass, \"dbi\"), src = src, from = from, ...)\n\u001B[90m 10. \u001B[39mdbplyr:::dbplyr_query_fields(src$con, source)\n\u001B[90m 11. \u001B[39mdbplyr:::dbplyr_fallback(con, \"db_query_fields\", ...)\n\u001B[90m 13. \u001B[39m\u001B[1m\u001B[94mdbplyr:::db_query_fields.DBIConnection(\u001B[39m\u001B[22mcon, ...\u001B[1m\u001B[94m)\u001B[39m\u001B[22m\n",
        "> ",
        "## Penguin Size and Mass by Sex and Species",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "library(dplyr)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dbplyr)",
        "> ",
        "",
        "> ",
        "con <- DBI::dbConnect(",
        "+ ",
        "  duckdb::duckdb(), ",
        "+ ",
        "  dbdir = \"my-db.duckdb\"",
        "+ ",
        "  )",
        "> ",
        "df <- dplyr::tbl(con, \"pg_enum\")",
        "> ",
        "df %>%",
        "+ ",
        "  group_by(species, sex) %>%",
        "+ ",
        "  summarise(",
        "+ ",
        "    across(",
        "+ ",
        "        ends_with(\"mm\") | ends_with(\"g\"),",
        "+ ",
        "      \\(x) mean(x, na.rm = TRUE)",
        "+ ",
        "      )",
        "+ ",
        "    ) %>%",
        "+ ",
        "  dplyr::collect() %>%",
        "+ ",
        "  knitr::kable()",
        "\u001B[1m\u001B[33mError\u001B[39m in `group_by()`:\u001B[22m\n\u001B[1m\u001B[22m\u001B[36mℹ\u001B[39m In argument: `species`\n\u001B[1mCaused by error:\u001B[22m\n\u001B[1m\u001B[22m\u001B[33m!\u001B[39m Object `species` not found.\nBacktrace:\n\u001B[90m  1. \u001B[39m... %>% knitr::kable()\n\u001B[90m  6. \u001B[39m\u001B[1m\u001B[94mdbplyr:::group_by.tbl_lazy(\u001B[39m\u001B[22m., species, sex\u001B[1m\u001B[94m)\u001B[39m\u001B[22m\n\u001B[90m  7. \u001B[39mdbplyr:::partial_eval_dots(.data, ..., .named = FALSE)\n\u001B[90m  8. \u001B[39mdbplyr:::partial_eval_quo(dot, .data, error_call, dot_name, was_named[[i]])\n\u001B[90m 10. \u001B[39mdbplyr::partial_eval(get_expr(x), data, get_env(x), error_call = error_call)\n\u001B[90m 11. \u001B[39mdbplyr:::partial_eval_sym(call, data, env)\n",
        "> ",
        "## Penguin Size and Mass by Sex and Species",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "library(dplyr)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dbplyr)",
        "> ",
        "",
        "> ",
        "con <- DBI::dbConnect(",
        "+ ",
        "  duckdb::duckdb(), ",
        "+ ",
        "  dbdir = \"my-db.duckdb\"",
        "+ ",
        "  )",
        "> ",
        "df <- dplyr::tbl(con, \"penguins\")",
        "\u001B[1m\u001B[33mError\u001B[39m in `db_query_fields.DBIConnection()`:\u001B[22m\n\u001B[1m\u001B[22m\u001B[33m!\u001B[39m Can't query fields.\n\u001B[36mℹ\u001B[39m Using SQL: SELECT * FROM (FROM penguins) q03 WHERE (0 = 1)\n\u001B[1mCaused by error:\u001B[22m\n\u001B[33m!\u001B[39m rapi_prepare: Failed to prepare query SELECT *\nFROM (FROM penguins) q03\nWHERE (0 = 1)\nError: Catalog Error: Table with name penguins does not exist!\nDid you mean \"pg_enum\"?\nLINE 2: FROM (FROM penguins) q03\n                   ^\nBacktrace:\n\u001B[90m  1. \u001B[39m\u001B[1mdplyr\u001B[22m::tbl(con, \"penguins\")\n\u001B[90m  4. \u001B[39mdplyr:::tbl.DBIConnection(con, \"penguins\")\n\u001B[90m  6. \u001B[39m\u001B[1mdbplyr\u001B[22m:::tbl.src_dbi(...)\n\u001B[90m  7. \u001B[39mdbplyr::tbl_sql(c(subclass, \"dbi\"), src = src, from = from, ...)\n\u001B[90m 10. \u001B[39mdbplyr:::dbplyr_query_fields(src$con, source)\n\u001B[90m 11. \u001B[39mdbplyr:::dbplyr_fallback(con, \"db_query_fields\", ...)\n\u001B[90m 13. \u001B[39m\u001B[1m\u001B[94mdbplyr:::db_query_fields.DBIConnection(\u001B[39m\u001B[22mcon, ...\u001B[1m\u001B[94m)\u001B[39m\u001B[22m\n",
        "> ",
        "reticulate::repl_python()",
        "Python 3.9.5 (C:/Users/C25Chase.Powers/OneDrive - afacademy.af.edu/Documents/Powers Math 378 Porject/.venv/Scripts/python.exe)\nReticulate 1.35.0 REPL -- A Python interpreter in R.\nEnter 'exit' or 'quit' to exit the REPL and return to R.\n",
        ">>> ",
        "from pandas import get_dummies",
        ">>> ",
        "import numpy as np",
        "Warning:",
        " Connection is garbage-collected, use dbDisconnect() to avoid this.\n",
        ">>> ",
        "from sklearn.linear_model import LinearRegression",
        ">>> ",
        "from sklearn import preprocessing",
        ">>> ",
        "import duckdb",
        ">>> ",
        "",
        ">>> ",
        "## Get Data",
        ">>> ",
        "con = duckdb.connect('my-db.duckdb')",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nduckdb.duckdb.IOException: IO Error: File is already open in \nC:\\Program Files\\RStudio\\bin\\rsession-utf8.exe (PID 8396)\n",
        ">>> ",
        "df = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'con' is not defined\n",
        ">>> ",
        "",
        ">>> ",
        "## Get Data",
        ">>> ",
        "con = duckdb.connect('my-db.duckdb')",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nduckdb.duckdb.IOException: IO Error: File is already open in \nC:\\Program Files\\RStudio\\bin\\rsession-utf8.exe (PID 8396)\n",
        ">>> ",
        "df = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'con' is not defined\n",
        ">>> ",
        "quit",
        "Warning messages:\n",
        "1: The request to `use_python(\"C:/Program Files/Python39/python.exe\")` will be ignored because the environment variable RETICULATE_PYTHON is set to \"C:/Users/C25Chase.Powers/OneDrive - afacademy.af.edu/Documents/Powers Math 378 Porject/.venv/Scripts/python.exe\" \n",
        "2: Python 'C:/Program Files/Python39/python.exe' was requested but 'C:/Users/C25Chase.Powers/OneDrive - afacademy.af.edu/Documents/Powers Math 378 Porject/.venv/Scripts/python.exe' was loaded instead (see reticulate::py_config() for more information) \n",
        "\nRestarting R session...\n\n",
        "Loading required package: duckdb\n",
        "Loading required package: DBI\n",
        "> ",
        "renv::snapshot()",
        "- The lockfile is already up to date.\n",
        "> ",
        "## Penguin Size and Mass by Sex and Species",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "library(dplyr)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dbplyr)",
        "> ",
        "",
        "> ",
        "con <- DBI::dbConnect(",
        "+ ",
        "  duckdb::duckdb(), ",
        "+ ",
        "  dbdir = \"my-db.duckdb\"",
        "+ ",
        "  )",
        "> ",
        "df <- dplyr::tbl(con, \"penguins\")",
        "\u001B[1m\u001B[33mError\u001B[39m in `db_query_fields.DBIConnection()`:\u001B[22m\n\u001B[1m\u001B[22m\u001B[33m!\u001B[39m Can't query fields.\n\u001B[36mℹ\u001B[39m Using SQL: SELECT * FROM (FROM penguins) q01 WHERE (0 = 1)\n\u001B[1mCaused by error:\u001B[22m\n\u001B[33m!\u001B[39m rapi_prepare: Failed to prepare query SELECT *\nFROM (FROM penguins) q01\nWHERE (0 = 1)\nError: Catalog Error: Table with name penguins does not exist!\nDid you mean \"pg_enum\"?\nLINE 2: FROM (FROM penguins) q01\n                   ^\nBacktrace:\n\u001B[90m  1. \u001B[39m\u001B[1mdplyr\u001B[22m::tbl(con, \"penguins\")\n\u001B[90m  4. \u001B[39mdplyr:::tbl.DBIConnection(con, \"penguins\")\n\u001B[90m  6. \u001B[39m\u001B[1mdbplyr\u001B[22m:::tbl.src_dbi(...)\n\u001B[90m  7. \u001B[39mdbplyr::tbl_sql(c(subclass, \"dbi\"), src = src, from = from, ...)\n\u001B[90m 10. \u001B[39mdbplyr:::dbplyr_query_fields(src$con, source)\n\u001B[90m 11. \u001B[39mdbplyr:::dbplyr_fallback(con, \"db_query_fields\", ...)\n\u001B[90m 13. \u001B[39m\u001B[1m\u001B[94mdbplyr:::db_query_fields.DBIConnection(\u001B[39m\u001B[22mcon, ...\u001B[1m\u001B[94m)\u001B[39m\u001B[22m\n",
        "> ",
        "## Penguin Size and Mass by Sex and Species",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "library(dplyr)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dbplyr)",
        "> ",
        "",
        "> ",
        "con <- DBI::dbConnect(duckdb::duckdb(), dbdir = \"my-db.duckdb\")",
        "> ",
        "DBI::dbWriteTable(con, \"penguins\", palmerpenguins::penguins)",
        "> ",
        "DBI::dbDisconnect(con)",
        "> ",
        "df <- dplyr::tbl(con, \"penguins\")",
        "Error in DBI::dbExistsTable(src, from) : Invalid connection\n",
        "> ",
        "## Penguin Size and Mass by Sex and Species",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "library(dplyr)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dbplyr)",
        "> ",
        "",
        "> ",
        "con <- DBI::dbConnect(duckdb::duckdb(), dbdir = \"my-db.duckdb\")",
        "> ",
        "DBI::dbWriteTable(con, \"penguins\", palmerpenguins::penguins)",
        "Error in .local(conn, name, value, ...) : \n  Table penguins already exists. Set `overwrite = TRUE` if you want to remove the existing table. Set `append = TRUE` if you would like to add the new data to the existing table.\n",
        "> ",
        "## Penguin Size and Mass by Sex and Species",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "library(dplyr)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dbplyr)",
        "> ",
        "",
        "> ",
        "con <- DBI::dbConnect(duckdb::duckdb(), dbdir = \"my-db.duckdb\")",
        "> ",
        "DBI::dbWriteTable(con, \"penguins\", palmerpenguins::penguins, append= TRUE)",
        "> ",
        "",
        "> ",
        "df <- dplyr::tbl(con, \"penguins\")",
        "> ",
        "head(df)",
        "> ",
        "df %>%",
        "+ ",
        "  group_by(species, sex) %>%",
        "+ ",
        "  summarise(",
        "+ ",
        "    across(",
        "+ ",
        "        ends_with(\"mm\") | ends_with(\"g\"),",
        "+ ",
        "      \\(x) mean(x, na.rm = TRUE)",
        "+ ",
        "      )",
        "+ ",
        "    ) %>%",
        "+ ",
        "  dplyr::collect() %>%",
        "+ ",
        "  knitr::kable()",
        "> ",
        "## Penguin Size vs Mass by Species",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "df %>%",
        "+ ",
        "  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +",
        "+ ",
        "  geom_point() + ",
        "+ ",
        "  geom_smooth(method = \"lm\")",
        "Warning:",
        " Connection is garbage-collected, use dbDisconnect() to avoid this.\n",
        "Warning:",
        " Connection is garbage-collected, use dbDisconnect() to avoid this.\n",
        "> ",
        "DBI::dbDisconnect(con)",
        "> ",
        "reticulate::repl_python()",
        "Python 3.9.5 (C:/Users/C25Chase.Powers/OneDrive - afacademy.af.edu/Documents/Powers Math 378 Porject/.venv/Scripts/python.exe)\nReticulate 1.35.0 REPL -- A Python interpreter in R.\nEnter 'exit' or 'quit' to exit the REPL and return to R.\n",
        ">>> ",
        "",
        ">>> ",
        "## Get Data",
        ">>> ",
        "con = duckdb.connect('my-db.duckdb')",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'duckdb' is not defined\n",
        ">>> ",
        "df = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'con' is not defined\n",
        ">>> ",
        "",
        ">>> ",
        "df.head(3)",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'df' is not defined\n",
        ">>> ",
        "quit",
        "Warning messages:\n",
        "1: The request to `use_python(\"C:/Program Files/Python39/python.exe\")` will be ignored because the environment variable RETICULATE_PYTHON is set to \"C:/Users/C25Chase.Powers/OneDrive - afacademy.af.edu/Documents/Powers Math 378 Porject/.venv/Scripts/python.exe\" \n",
        "2: Python 'C:/Program Files/Python39/python.exe' was requested but 'C:/Users/C25Chase.Powers/OneDrive - afacademy.af.edu/Documents/Powers Math 378 Porject/.venv/Scripts/python.exe' was loaded instead (see reticulate::py_config() for more information) \n",
        "> ",
        "{python}",
        "Error: object 'python' not found\n",
        "> ",
        "reticulate::repl_python()",
        "Python 3.9.5 (C:/Users/C25Chase.Powers/OneDrive - afacademy.af.edu/Documents/Powers Math 378 Porject/.venv/Scripts/python.exe)\nReticulate 1.35.0 REPL -- A Python interpreter in R.\nEnter 'exit' or 'quit' to exit the REPL and return to R.\n",
        ">>> ",
        "",
        ">>> ",
        "## Get Data",
        ">>> ",
        "con = duckdb.connect('my-db.duckdb')",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'duckdb' is not defined\n",
        ">>> ",
        "df = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'con' is not defined\n",
        ">>> ",
        "",
        ">>> ",
        "df.head(3)",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'df' is not defined\n",
        ">>> ",
        "",
        ">>> ",
        "## Get Data",
        ">>> ",
        "con = duckdb.connect('my-db.duckdb')",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'duckdb' is not defined\n",
        ">>> ",
        "df = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'con' is not defined\n",
        ">>> ",
        "quit",
        "> ",
        "library(reticulate)",
        "> ",
        "reticulate::repl_python()",
        "Python 3.9.5 (C:/Users/C25Chase.Powers/OneDrive - afacademy.af.edu/Documents/Powers Math 378 Porject/.venv/Scripts/python.exe)\nReticulate 1.35.0 REPL -- A Python interpreter in R.\nEnter 'exit' or 'quit' to exit the REPL and return to R.\n",
        ">>> ",
        "import duckdb",
        ">>> ",
        "from pandas import get_dummies",
        ">>> ",
        "import numpy as np",
        ">>> ",
        "from sklearn.linear_model import LinearRegression",
        ">>> ",
        "from sklearn import preprocessing",
        ">>> ",
        "",
        ">>> ",
        "## Get Data",
        ">>> ",
        "con = duckdb.connect('my-db.duckdb')",
        ">>> ",
        "df = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()",
        ">>> ",
        "df.head(3)",
        "  species     island  bill_length_mm  ...  body_mass_g     sex  year\r\n0  Adelie  Torgersen            39.1  ...       3750.0    male  2007\r\n1  Adelie  Torgersen            39.5  ...       3800.0  female  2007\r\n2  Adelie  Torgersen            40.3  ...       3250.0  female  2007\r\n\r\n[3 rows x 8 columns]\r\n",
        ">>> ",
        "",
        ">>> ",
        "## Define Model and Fit",
        ">>> ",
        "X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)",
        ">>> ",
        "y = df['body_mass_g']",
        ">>> ",
        "",
        ">>> ",
        "model = LinearRegression().fit(X, y)",
        ">>> ",
        "",
        ">>> ",
        "## Get some information",
        ">>> ",
        "print(f\"R^2 {model.score(X,y)}\")",
        "R^2 0.8555368759537614\r\n",
        ">>> ",
        "print(f\"Intercept {model.intercept_}\")",
        "Intercept 2169.2697209394037\r\n",
        ">>> ",
        "print(f\"Columns {X.columns}\")",
        "Columns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\r\n",
        ">>> ",
        "print(f\"Coefficients {model.coef_}\")",
        "Coefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\r\n",
        ">>> ",
        "",
        ">>> ",
        "## Turn into Vetiver Mode",
        ">>> ",
        "from vetiver import VetiverModel",
        ">>> ",
        "v = VetiverModel(model, model_name='penguin_model', prototype_data=X)",
        ">>> ",
        "",
        ">>> ",
        "## Save to Board",
        ">>> ",
        "from pins import board_folder",
        ">>> ",
        "from vetiver import vetiver_pin_write",
        ">>> ",
        "",
        ">>> ",
        "model_board = board_folder(\"/data/model\", allow_pickle_read = True)",
        ">>> ",
        "vetiver_pin_write(model_board, v)",
        "Model Cards provide a framework for transparent, responsible reporting. \r\n Use the vetiver `.qmd` Quarto template as a place to start, \r\n with vetiver.model_card()",
        "\r\n",
        "Writing pin:\r\nName: 'penguin_model'\r\nVersion: 20240417T105523Z-18b10",
        "\r\n",
        ">>> ",
        "",
        ">>> ",
        "## Turn model into API",
        ">>> ",
        "from vetiver import VetiverAPI",
        ">>> ",
        "app = VetiverAPI(v, check_prototype = True)",
        ">>> ",
        "con.close()",
        ">>> ",
        "app.run(port = 8080)",
        "INFO:     Started server process [14344]\r\n",
        "INFO:     Waiting for application startup.\r\nINFO:     VetiverAPI starting...\r\nINFO:     Application startup complete.\r\nINFO:     Uvicorn running on http://127.0.0.1:8080 (Press CTRL+C to quit)\r\n",
        "INFO:     Shutting down\r\n",
        "INFO:     Waiting for application shutdown.\r\n",
        "INFO:     Application shutdown complete.\r\nINFO:     Finished server process [14344]\r\n",
        ">>> ",
        "quit",
        "> ",
        "## Penguin Size and Mass by Sex and Species",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "library(dplyr)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dbplyr)",
        "> ",
        "",
        "> ",
        "con <- DBI::dbConnect(",
        "+ ",
        "  duckdb::duckdb(), ",
        "+ ",
        "  dbdir = \"my-db.duckdb\"",
        "+ ",
        "  )",
        "> ",
        "df <- dplyr::tbl(con, \"penguins\")",
        "> ",
        "head(df)",
        "> ",
        "df %>%",
        "+ ",
        "  group_by(species, sex) %>%",
        "+ ",
        "  summarise(",
        "+ ",
        "    across(",
        "+ ",
        "        ends_with(\"mm\") | ends_with(\"g\"),",
        "+ ",
        "      \\(x) mean(x, na.rm = TRUE)",
        "+ ",
        "      )",
        "+ ",
        "    ) %>%",
        "+ ",
        "  dplyr::collect() %>%",
        "+ ",
        "  knitr::kable()",
        "> ",
        "## Penguin Size vs Mass by Species",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "df %>%",
        "+ ",
        "  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +",
        "+ ",
        "  geom_point() + ",
        "+ ",
        "  geom_smooth(method = \"lm\")",
        "> ",
        "DBI::dbDisconnect(con)",
        "> ",
        "install.packages(\"httr2\")",
        "# Downloading packages -------------------------------------------------------\n- Downloading httr2 from CRAN ...               OK [539.7 Kb in 6.9s]\nSuccessfully downloaded 1 package in 8.5 seconds.\n\nThe following package(s) will be installed:\n- httr2 [1.0.1]\nThese packages will be installed into \"~/Powers Math 378 Porject/renv/library/R-4.2/x86_64-w64-mingw32\".\n\n",
        "Do you want to proceed? [Y/n]: ",
        "y",
        "\n# Installing packages --------------------------------------------------------\n- Installing httr2 ...                          OK [installed binary and cached in 1.7s]\nSuccessfully installed 1 package in 1.9 seconds.\n\nRestarting R session...\n\n"
    ]
}